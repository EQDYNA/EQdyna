#! /usr/bin/env python3
"""
Script to setup the case via user_defined_params.py.
"""
from user_defined_params import par
import netCDF4 as nc
import numpy as np
import os

def create_model_input_file():
    # Function to create bGlobal.txt, bModelGeometry.txt, b.FaultGeometry.txt,
    #  bMaterial.txt, bStations.txt used by EQdyna.
    with open('bGlobal.txt', 'w') as f:
        f.write(str(par.mode)        + "\n")
        f.write(str(par.C_elastic)   + "\n")
        f.write(str(par.C_nuclea)    + "\n")
        f.write(str(par.C_degen)     + "\n")
        f.write(str(par.insertFaultType) + "\n")
        f.write(str(par.friclaw)  + "\n")
        f.write(str(par.ntotft)   + "\n")
        f.write(str(par.nucfault) + "\n")
        f.write(str(par.tpv)      + "\n")
        f.write(str(par.output_plastic) + "\n")
        f.write(str(par.outputGroundMotion) + "\n")
        f.write(" "           + "\n")
        f.write(str(par.nx) + " " + str(par.ny) + " " + str(par.nz) + "\n")
        f.write(" "     + "\n")
        f.write(str(par.term) + "\n")
        f.write(str(par.dt)   + "\n")
        f.write(" "       + "\n")
        f.write(str(par.nmat)  + " " + str(par.n2mat) + "\n")
        f.write(" "     + "\n")
        f.write(str(par.xsource) + " " + str(par.ysource) + " " + str(par.zsource) + "\n")
        f.write(str(par.nucR) + " " + str(par.nucRuptVel) + " " + str(par.nucdtau0) + "\n")
        
    with open('bModelGeometry.txt', "w") as f:
        f.write(str(par.xmin) + "  " + str(par.xmax) + "\n")
        f.write(str(par.ymin) + "  " + str(par.ymax) + "\n")
        f.write(str(par.zmin) + "  " + str(par.zmax) + "\n")
        f.write(" " + "\n")
        f.write(str(par.nuni_y_plus) + " " + str(par.nuni_y_minus) + "\n")
        f.write(str(par.enlarging_ratio) + "\n")
        f.write(str(par.dx))
        
    with open('bFaultGeometry.txt', "w") as f:
        for i in range(par.ntotft):
            f.write("For fault No. " + str(i+1) + "\n")
            f.write(str(par.fxmin) + "  " + str(par.fxmax) + "\n")
            f.write(str(par.fymin) + "  " + str(par.fymax) + "\n")
            f.write(str(par.fzmin) + "  " + str(par.fzmax) + "\n")
            
    with open('bMaterial.txt', "w") as f:
        if par.nmat == 1:
            f.write(str(par.vp) + " " + str(par.vs) + " " + str(par.rou) + "\n")
        elif par.nmat > 1: 
            for i in range(par.nmat):
                f.write(str(par.mat[i,0]) + " " + str(par.mat[i,1]) + " " + str(par.mat[i,2]) + " " + str(par.mat[i,3]) + "\n")

def create_station_input_file():
    # Function to create model.txt used by EQquasi.
    with open('bStations.txt', 'w') as f:
        f.write(str(par.n_off_fault) + "\n")
        f.write(str(par.n_on_fault) + "\n")
        f.write(str(" ") + "\n")
        for i in range(len(par.st_coor_on_fault)):
            f.write(str(par.st_coor_on_fault[i][0]) + " " + str(par.st_coor_on_fault[i][1]) + "\n")
        f.write(str(" ") + "\n")
        for i in range(len(par.st_coor_off_fault)):
            f.write(str(par.st_coor_off_fault[i][0]) + " " + str(par.st_coor_off_fault[i][1]) + " " + str(par.st_coor_off_fault[i][2]) + "\n")

def netcdf_write_on_fault_vars():
  # Function to on_fault_vars input used by EQquasi.
  ds         = nc.Dataset("on_fault_vars_input.nc", "w", format="NETCDF4")
  dip        = ds.createDimension('dip', par.nfz)
  strike     = ds.createDimension('strike', par.nfx)
  dip_var    = ds.createVariable('dip', np.float64, ('dip',))
  strike_var = ds.createVariable('strike', np.float64, ('strike',))
  
  # for the slip weakening law
  var0  = ds.createVariable('sw_fs', np.float64, ('dip','strike',))
  var1  = ds.createVariable('sw_fd', np.float64, ('dip','strike',))
  var2  = ds.createVariable('sw_D0', np.float64, ('dip','strike',))
  
  # for the rsf
  var3  = ds.createVariable('rsf_a',  np.float64, ('dip','strike',))
  var4  = ds.createVariable('rsf_b',  np.float64, ('dip','strike',))
  var5  = ds.createVariable('rsf_Dc', np.float64, ('dip','strike',))
  var6  = ds.createVariable('rsf_v0', np.float64, ('dip','strike',))
  var7  = ds.createVariable('rsf_r0', np.float64, ('dip','strike',))
  
  # additional for the rsf slip law with strong rate weakening
  var8  = ds.createVariable('rsf_fw',  np.float64, ('dip','strike',))
  var9  = ds.createVariable('rsf_vw',  np.float64, ('dip','strike',))
  
  # additional for the rsf with thermal pressurization
  var10 = ds.createVariable('tp_a_hy',  np.float64, ('dip','strike',))
  var11 = ds.createVariable('tp_a_th',  np.float64, ('dip','strike',))
  var12 = ds.createVariable('tp_rouc',  np.float64, ('dip','strike',))
  var13 = ds.createVariable('tp_lambda',np.float64, ('dip','strike',))
  var14 = ds.createVariable('tp_h',     np.float64, ('dip','strike',))
  var15 = ds.createVariable('tp_Tini',  np.float64, ('dip','strike',))
  var16 = ds.createVariable('tp_pini',  np.float64, ('dip','strike',))
  
  # kinematics and initial stresses
  var17 = ds.createVariable('init_slip_rate',     np.float64, ('dip','strike',))
  var18 = ds.createVariable('init_shear_stress',  np.float64, ('dip','strike',))
  var19 = ds.createVariable('init_normal_stress', np.float64, ('dip','strike',))
  var20 = ds.createVariable('init_state',         np.float64, ('dip','strike',))
  
  # for the time weakening law
  var21 = ds.createVariable('tw_t0', np.float64, ('dip','strike',))
  
  var0.units = 'unit'
  var1.units = 'unit'
  var2.units = 'unit'
  
  var3.units = "unit"
  var4.units = "unit"
  var5.units = 'meters'
  var6.units = 'm/s'
  var7.units = 'unit'
  
  var8.units = 'unit'
  var9.units = 'unit' 
  
  var10.units = 'm^2/s'
  var11.units = 'm^2/s'
  var12.units = 'J/(m^3K)'
  var13.units = 'PaK-1'
  var14.units = 'm'
  var15.units = 'K'
  var16.units = 'Pa' 
  
  var17.units = 'm/s'
  var18.units = 'Pa'
  var19.units = 'Pa'
  var20.units = 'unit'
  
  var21.units = 's'
  
  strike_var[:] = par.fx[:]
  dip_var[:]    = par.fz[:]
  
  var0[:,:] = par.on_fault_vars[:,:,1]   # sw_fs
  var1[:,:] = par.on_fault_vars[:,:,2]   # sw_fd
  var2[:,:] = par.on_fault_vars[:,:,3]   # sw_D0 
  
  var3[:,:] = par.on_fault_vars[:,:,9]   # rsf_a
  var4[:,:] = par.on_fault_vars[:,:,10]  # rsf_b 
  var5[:,:] = par.on_fault_vars[:,:,11]  # rsf_Dc 
  var6[:,:] = par.on_fault_vars[:,:,12]  # rsf_v0
  var7[:,:] = par.on_fault_vars[:,:,13]  # rsf_r0 
  
  var8[:,:] = par.on_fault_vars[:,:,14]  # rsf_fw  
  var9[:,:] = par.on_fault_vars[:,:,15]  # rsf_vw 
  
  var10[:,:] = par.on_fault_vars[:,:,16] # tp_a_hy
  var11[:,:] = par.on_fault_vars[:,:,17] # tp_a_th
  var12[:,:] = par.on_fault_vars[:,:,18] # tp_rouc
  var13[:,:] = par.on_fault_vars[:,:,19] # tp_lambda
  var14[:,:] = par.on_fault_vars[:,:,40] # tp_h
  var15[:,:] = par.on_fault_vars[:,:,41] # tp_Tini
  var16[:,:] = par.on_fault_vars[:,:,42] # tp_pini
  
  var17[:,:] = par.on_fault_vars[:,:,46]  # init_slip_rate  
  var18[:,:] = par.on_fault_vars[:,:,8]  # init_shear_stress
  var19[:,:] = par.on_fault_vars[:,:,7]  # init_normal_stress
  var20[:,:] = par.on_fault_vars[:,:,20]  # init_state
  
  var21[:,:] = par.on_fault_vars[:,:,5]  # tw_t0
  
  ds.close()
  
def create_batch_script():
    # Function to create batch script used by HPC system.
    with open("batch.hpc", "w") as f:
        f.write("#! /bin/bash" + "\n")
        f.write("#SBATCH -J " + str(par.casename) + "\n")
        f.write("#SBATCH -o a.eqdyna.log%j" + "\n")
        f.write("#SBATCH -N " + str(par.HPC_nnode) + "\n")
        f.write("#SBATCH -n " + str(par.HPC_ncpu) + "\n")
        f.write("#SBATCH -p " + str(par.HPC_queue) + "\n")
        f.write("#SBATCH -t " + str(par.HPC_time) + "\n")
        f.write("#SBATCH -A " + str(par.HPC_account) + "\n")
        f.write("#SBATCH --mail-user=" + str(par.HPC_email) + "\n")
        f.write("#SBATCH --mail-type=begin" + "\n")
        f.write("#SBATCH --mail-type=end" + "\n")
        # Executable part.
        f.write("  ibrun eqdyna" + "\n")
        f.write("  ibrun -np 1 python plotRuptureDynamics" + "\n") # produce figure of rupture dynamics
        #f.write("for i in $(seq " + str(istart) + " " + str(iend) + ");" + "\n")
        #f.write("do" + "\n")
        #f.write("  echo $i > currentcycle.txt" + "\n")
        #f.write("  ibrun eqquasi" + "\n")
        #f.write("  mkdir \"./Q$((i-1))\"" + "\n")
        #f.write("  mv fltst* srfst* tdyna* global* p1* p2* disp.* fault.* cplot* \"./Q$((i-1))\"" + "\n")
        #f.write("  cp \"./Q$((i-1))/\"*.r.nc ./" + "\n")
        #f.write("done" + "\n")
        # End excutable part.
        
def create_batch_script_cycle_old():
    # Function to create batch script used by HPC system.
    # made obsolete on 20230228 but kept.
    with open("batch.cycle.hpc", "w") as f:
        f.write("#! /bin/bash" + "\n")
        f.write("#SBATCH -J " + str(par.casename) + "\n")
        f.write("#SBATCH -o a.eqdyna.log%j" + "\n")
        f.write("#SBATCH -N " + str(par.HPC_nnode) + "\n")
        f.write("#SBATCH -n " + str(par.HPC_ncpu) + "\n")
        f.write("#SBATCH -p " + str(par.HPC_queue) + "\n")
        f.write("#SBATCH -t " + str(par.HPC_time) + "\n")
        f.write("#SBATCH -A " + str(par.HPC_account) + "\n")
        f.write("#SBATCH --mail-user=" + str(par.HPC_email) + "\n")
        f.write("#SBATCH --mail-type=begin" + "\n")
        f.write("#SBATCH --mail-type=end" + "\n")
        # Executable part.
        f.write("  read i < currentcycle.txt" + "\n")
        f.write("  cp \"../Q$((i-1))/\"*.r.nc ./" + "\n")
        f.write("  ibrun eqdyna" + "\n")
        f.write("  ibrun -np 1 python plotRuptureDynamics" + "\n")
        f.write("  rm -rf \"../D$((i-1))\"" + "\n")
        f.write("  mkdir \"../D$((i-1))\"" + "\n")
        f.write("  mv a.eqdyna.log* body* faultst* frt.txt* global* gm* p2* cRuptureDynamics.png \"../D$((i-1))\"" + "\n")
        # leave the update of currentcycle.txt to ESCI scripts? 
        #f.write("  i=$((i+1))" + "\n")
        #f.write("  echo $i > currentcycle.txt" + "\n")
        # End excutable part.

def create_batch_script_cycle():
    # Function to create batch script used by HPC system.
    with open("batch.cycle.eqdyna.hpc", "w") as f:
        f.write("#! /bin/bash" + "\n")
        f.write("#SBATCH -J " + str(par.casename)       + "\n")
        f.write("#SBATCH -o a.eqdyna.log%j"         + "\n")
        f.write("#SBATCH -N " + str(par.HPC_nnode)      + "\n")
        f.write("#SBATCH -n " + str(par.HPC_ncpu)       + "\n")
        f.write("#SBATCH -p " + str(par.HPC_queue)      + "\n")
        f.write("#SBATCH -t " + str(par.HPC_time)       + "\n")
        f.write("#SBATCH -A " + str(par.HPC_account)    + "\n")
        f.write("#SBATCH --mail-user=" + str(par.HPC_email) + "\n")
        f.write("#SBATCH --mail-type=begin"         + "\n")
        f.write("#SBATCH --mail-type=end"           + "\n")
        # Executable part.
        f.write("  read i < currentcycle.txt"       + "\n")
        f.write("# fetch input files from /eqdyna"  + "\n")
        f.write("  cp eqdyna/bFaultGeometry.txt ./" + "\n")
        f.write("  cp eqdyna/bGlobal.txt ./"        + "\n")
        f.write("  cp eqdyna/bMaterial.txt ./"      + "\n")
        f.write("  cp eqdyna/bModelGeometry.txt ./" + "\n")
        f.write("  cp eqdyna/bStations.txt ./"      + "\n")
        f.write("  cp eqdyna/on_fault_vars_input.nc ./" + "\n")
        f.write("  cp eqdyna/rough_geo_cycle.txt ./" + "\n")
        f.write("# fetch fault.r.nc from Q(i-1)"        + "\n")
        f.write("  cp \"Q$((i-1))/\"fault.r.nc ./"  + "\n") 
        f.write("# run eqdyna"                      + "\n")
        f.write("  ibrun eqdyna"                    + "\n")
        f.write("# move results to D(i-1)"          + "\n")
        f.write("# delete D(i-1)"                   + "\n")
        f.write("  rm -rf \"D$((i-1))\""            + "\n")
        f.write("# create D(i-1) and copy results and inputs over" + "\n")
        f.write("  mkdir \"D$((i-1))\""             + "\n")
        f.write("  cp -r a.eqdyna.log* *.r.nc \"D$((i-1))\""   + "\n")
        f.write("  cp -r on_fault_vars_input.nc \"D$((i-1))\"" + "\n")
        f.write("  cp -r currentcycle.txt \"D$((i-1))\""       + "\n")
        f.write("  cp -r body* faultst* frt.txt* global* gm* p2* \"D$((i-1))\""+ "\n")
        f.write("  cp -r currentcycle.txt \"D$((i-1))\""               + "\n")
        f.write("  cp -r eqdyna/plotRuptureDynamics \"D$((i-1))\""     + "\n")
        f.write("  cp -r eqdyna/user_defined_params.py \"D$((i-1))\""  + "\n")
        f.write("  cp -r eqdyna/lib.py \"D$((i-1))\""                  + "\n")
        f.write("# clean up the root for running eqquasi"              + "\n")
        f.write("  rm -rf a.eqdyna.log* bFaultGeometry.txt bGlobal.txt"+ "\n")
        f.write("  rm -rf bMaterial.txt bModelGeometry.txt"            + "\n")
        f.write("  rm -rf bStations.txt *.r.nc"                        + "\n")
        f.write("  rm -rf on_fault_vars_input.nc"                      + "\n")
        f.write("  rm -rf body* faultst* frt.txt* global* gm* p2* "    + "\n")
        f.write("# postprocessing"                                     + "\n")
        f.write("  cd \"D$((i-1))\""                                   + "\n")
        f.write("  ibrun -np 1 python plotRuptureDynamics"             + "\n")
        f.write("  cd .."                                              + "\n")
        f.write("# update cycle id i"                                  + "\n")
        f.write("  i=$((i+1))"                                         + "\n")
        f.write("  echo $i > currentcycle.txt"                         + "\n")
        # End excutable part.
        
def estimate_HPC_resource():
    nx = int((par.xmax-par.xmin)/par.dx)
    nz = int((par.zmax-par.zmin)/par.dx)
    ncell = nx*nz*(par.nuni_y_plus + par.nuni_y_minus)*2
    estimate_ncpu = int(ncell/10000)
    estimate_nnode = int(estimate_ncpu/128) + 1
    print("Estimated total cells in the model is " + str(ncell))
    print("Estimated number of computing nodes to be requested is " + str(estimate_nnode))
    print("Estimated number of CPUs to be requested is " + str(estimate_ncpu))

def _main_func(description):
    create_model_input_file()
    create_batch_script()
    create_batch_script_cycle()
    create_station_input_file()
    estimate_HPC_resource()
    netcdf_write_on_fault_vars()
    if par.insertFaultType>0:
        os.system('./generateFaultInterface')
if __name__ == "__main__":
    _main_func(__doc__)
