#! /usr/bin/env python3
"""
Script to setup the case via user_defined_params.py.
"""
from user_defined_params import *
import netCDF4 as nc

def create_model_input_file():
    # Function to create bGlobal.txt, bModelGeometry.txt, b.FaultGeometry.txt,
    #  bMaterial.txt, bStations.txt used by EQdyna.
    with open('bGlobal.txt', 'w') as f:
        f.write(str(C_elastic)   + "\n")
        f.write(str(C_nuclea)    + "\n")
        f.write(str(C_degen)     + "\n")
        f.write(str(rough_fault) + "\n")
        f.write(str(friclaw)  + "\n")
        f.write(str(ntotft)   + "\n")
        f.write(str(nucfault) + "\n")
        f.write(str(tpv)      + "\n")
        f.write(str(output_plastic) + "\n")
        f.write(str(outputGroundMotion) + "\n")
        f.write(" "           + "\n")
        f.write(str(nx) + " " + str(ny) + " " + str(nz) + "\n")
        f.write(" "     + "\n")
        f.write(str(term) + "\n")
        f.write(str(dt)   + "\n")
        f.write(" "       + "\n")
        f.write(str(1)  + " " + str(3) + "\n")
        f.write(" "     + "\n")
        f.write(str(xsource) + " " + str(ysource) + " " + str(zsource) + "\n")
        
    with open('bModelGeometry.txt', "w") as f:
        f.write(str(xmin) + "  " + str(xmax) + "\n")
        f.write(str(ymin) + "  " + str(ymax) + "\n")
        f.write(str(zmin) + "  " + str(zmax) + "\n")
        f.write(" " + "\n")
        f.write(str(nuni_y_plus) + " " + str(nuni_y_minus) + "\n")
        f.write(str(enlarging_ratio) + "\n")
        f.write(str(dx))
        
    with open('bFaultGeometry.txt', "w") as f:
        for i in range(ntotft):
            f.write("For fault No. " + str(i+1) + "\n")
            f.write(str(fxmin) + "  " + str(fxmax) + "\n")
            f.write(str(fymin) + "  " + str(fymax) + "\n")
            f.write(str(fzmin) + "  " + str(fzmax) + "\n")
            
    with open('bMaterial.txt', "w") as f:
        f.write(str(vp) + " " + str(vs) + " " + str(rou) + "\n")

def create_station_input_file():
    # Function to create model.txt used by EQquasi.
    with open('bStations.txt', 'w') as f:
        f.write(str(n_off_fault) + "\n")
        f.write(str(n_on_fault) + "\n")
        f.write(str(" ") + "\n")
        for i in range(len(st_coor_on_fault)):
            f.write(str(st_coor_on_fault[i][0]) + " " + str(st_coor_on_fault[i][1]) + "\n")
        f.write(str(" ") + "\n")
        for i in range(len(st_coor_off_fault)):
            f.write(str(st_coor_off_fault[i][0]) + " " + str(st_coor_off_fault[i][1]) + " " + str(st_coor_off_fault[i][2]) + "\n")

def netcdf_write_on_fault_vars():
  # Function to on_fault_vars input used by EQquasi.
  ds         = nc.Dataset("on_fault_vars_input.nc", "w", format="NETCDF4")
  dip        = ds.createDimension('dip', nfz)
  strike     = ds.createDimension('strike', nfx)
  dip_var    = ds.createVariable('dip', np.float64, ('dip',))
  strike_var = ds.createVariable('strike', np.float64, ('strike',))
  
  # for the slip weakening law
  var0  = ds.createVariable('sw_fs', np.float64, ('strike','dip',))
  var1  = ds.createVariable('sw_fd', np.float64, ('strike','dip',))
  var2  = ds.createVariable('sw_D0', np.float64, ('strike','dip',))
  
  # for the rsf
  var3  = ds.createVariable('rsf_a',  np.float64, ('strike','dip',))
  var4  = ds.createVariable('rsf_b',  np.float64, ('strike','dip',))
  var5  = ds.createVariable('rsf_Dc', np.float64, ('strike','dip',))
  var6  = ds.createVariable('rsf_v0', np.float64, ('strike','dip',))
  var7  = ds.createVariable('rsf_r0', np.float64, ('strike','dip',))
  
  # additional for the rsf slip law with strong rate weakening
  var8  = ds.createVariable('rsf_fw',  np.float64, ('strike','dip',))
  var9  = ds.createVariable('rsf_vw',  np.float64, ('strike','dip',))
  
  # additional for the rsf with thermal pressurization
  var10 = ds.createVariable('tp_a_hy',  np.float64, ('strike','dip',))
  var11 = ds.createVariable('tp_a_th',  np.float64, ('strike','dip',))
  var12 = ds.createVariable('tp_rouc',  np.float64, ('strike','dip',))
  var13 = ds.createVariable('tp_lambda',np.float64, ('strike','dip',))
  var14 = ds.createVariable('tp_h',     np.float64, ('strike','dip',))
  var15 = ds.createVariable('tp_Tini',  np.float64, ('strike','dip',))
  var16 = ds.createVariable('tp_pini',  np.float64, ('strike','dip',))
  
  # kinematics and initial stresses
  var17 = ds.createVariable('init_slip_rate',     np.float64, ('strike','dip',))
  var18 = ds.createVariable('init_shear_stress',  np.float64, ('strike','dip',))
  var19 = ds.createVariable('init_normal_stress', np.float64, ('strike','dip',))
  var20 = ds.createVariable('init_state',         np.float64, ('strike','dip',))
  
 
  var0.units = 'unit'
  var1.units = 'unit'
  var2.units = 'unit'
  
  var3.units = "unit"
  var4.units = "unit"
  var5.units = 'meters'
  var6.units = 'm/s'
  var7.units = 'unit'
  
  var8.units = 'unit'
  var9.units = 'unit' 
  
  var10.units = 'm^2/s'
  var11.units = 'm^2/s'
  var12.units = 'J/(m^3K)'
  var13.units = 'PaK-1'
  var14.units = 'm'
  var15.units = 'K'
  var16.units = 'Pa' 
  
  var17.units = 'm/s'
  var18.units = 'Pa'
  var19.units = 'Pa'
  var20.units = 'unit'
  
  strike_var[:] = fx[:]
  dip_var[:]    = fz[:]
  
  var0[:,:] = on_fault_vars[:,:,1]   # sw_fs
  var1[:,:] = on_fault_vars[:,:,2]   # sw_fd
  var2[:,:] = on_fault_vars[:,:,3]   # sw_D0 
  
  var3[:,:] = on_fault_vars[:,:,9]   # rsf_a
  var4[:,:] = on_fault_vars[:,:,10]  # rsf_b 
  var5[:,:] = on_fault_vars[:,:,11]  # rsf_Dc 
  var6[:,:] = on_fault_vars[:,:,12]  # rsf_v0
  var7[:,:] = on_fault_vars[:,:,13]  # rsf_r0 
  
  var8[:,:] = on_fault_vars[:,:,14]  # rsf_fw  
  var9[:,:] = on_fault_vars[:,:,15]  # rsf_vw 
  
  var10[:,:] = on_fault_vars[:,:,16] # tp_a_hy
  var11[:,:] = on_fault_vars[:,:,17] # tp_a_th
  var12[:,:] = on_fault_vars[:,:,18] # tp_rouc
  var13[:,:] = on_fault_vars[:,:,19] # tp_lambda
  var14[:,:] = on_fault_vars[:,:,40] # tp_h
  var15[:,:] = on_fault_vars[:,:,41] # tp_Tini
  var16[:,:] = on_fault_vars[:,:,42] # tp_pini
  
  var17[:,:] = on_fault_vars[:,:,46]  # init_slip_rate  
  var18[:,:] = on_fault_vars[:,:,8]  # init_shear_stress
  var19[:,:] = on_fault_vars[:,:,7]  # init_normal_stress
  var20[:,:] = on_fault_vars[:,:,20]  # init_state
  
  ds.close()
  
def create_batch_script():
    # Function to create batch script used by HPC system.
    with open("batch.hpc", "w") as f:
        f.write("#! /bin/bash" + "\n")
        f.write("#SBATCH -J " + str(casename) + "\n")
        f.write("#SBATCH -o a.eqdyna.log%j" + "\n")
        f.write("#SBATCH -N " + str(HPC_nnode) + "\n")
        f.write("#SBATCH -n " + str(HPC_ncpu) + "\n")
        f.write("#SBATCH -p " + str(HPC_queue) + "\n")
        f.write("#SBATCH -t " + str(HPC_time) + "\n")
        f.write("#SBATCH -A " + str(HPC_account) + "\n")
        f.write("#SBATCH --mail-user=" + str(HPC_email) + "\n")
        f.write("#SBATCH --mail-type=begin" + "\n")
        f.write("#SBATCH --mail-type=end" + "\n")
        # Executable part.
        f.write("  ibrun eqdyna" + "\n")
        f.write("  ibrun -np 1 python plotRuptureDynamics" + "\n") # produce figure of rupture dynamics
        #f.write("for i in $(seq " + str(istart) + " " + str(iend) + ");" + "\n")
        #f.write("do" + "\n")
        #f.write("  echo $i > currentcycle.txt" + "\n")
        #f.write("  ibrun eqquasi" + "\n")
        #f.write("  mkdir \"./Q$((i-1))\"" + "\n")
        #f.write("  mv fltst* srfst* tdyna* global* p1* p2* disp.* fault.* cplot* \"./Q$((i-1))\"" + "\n")
        #f.write("  cp \"./Q$((i-1))/\"*.r.nc ./" + "\n")
        #f.write("done" + "\n")
        # End excutable part.
		
def create_batch_script_cycle():
    # Function to create batch script used by HPC system.
    with open("batch.cycle.hpc", "w") as f:
        f.write("#! /bin/bash" + "\n")
        f.write("#SBATCH -J " + str(casename) + "\n")
        f.write("#SBATCH -o a.eqdyna.log%j" + "\n")
        f.write("#SBATCH -N " + str(HPC_nnode) + "\n")
        f.write("#SBATCH -n " + str(HPC_ncpu) + "\n")
        f.write("#SBATCH -p " + str(HPC_queue) + "\n")
        f.write("#SBATCH -t " + str(HPC_time) + "\n")
        f.write("#SBATCH -A " + str(HPC_account) + "\n")
        f.write("#SBATCH --mail-user=" + str(HPC_email) + "\n")
        f.write("#SBATCH --mail-type=begin" + "\n")
        f.write("#SBATCH --mail-type=end" + "\n")
        # Executable part.
        f.write("  read i < currentcycle.txt" + "\n")
        f.write("  cp \"../Q$((i-1))/\"*.r.nc ./" + "\n")
        f.write("  ibrun eqdyna" + "\n")
        f.write("  ibrun -np 1 python plotRuptureDynamics" + "\n") 
        f.write("  mkdir \"../D$((i-1))\"" + "\n")
        f.write("  mv a.* body* faultst* frt.txt* global* gm* p2* \"../D$((i-1))\"" + "\n")
        f.write("  i=$((i+1))" + "\n")
        f.write("  echo $i > currentcycle.txt" + "\n")
        # End excutable part.

def estimate_HPC_resource():
    nx = int((xmax-xmin)/dx)
    nz = int((zmax-zmin)/dx)
    ncell = nx*nz*(nuni_y_plus + nuni_y_minus)*2
    estimate_ncpu = int(ncell/10000)
    estimate_nnode = int(estimate_ncpu/128) + 1
    print("Estimated total cells in the model is " + str(ncell))
    print("Estimated number of computing nodes to be requested is " + str(estimate_nnode))
    print("Estimated number of CPUs to be requested is " + str(estimate_ncpu))

def _main_func(description):
  create_model_input_file()
  create_batch_script()
  create_batch_script_cycle()
  create_station_input_file()
  estimate_HPC_resource()
  netcdf_write_on_fault_vars()

if __name__ == "__main__":
    _main_func(__doc__)
