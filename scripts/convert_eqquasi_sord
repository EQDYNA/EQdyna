#! /usr/bin/env python3
"""
Script to connect eqquasi and sord.
"""
import xarray as xr
import matplotlib.pyplot as plt
import numpy as np
import os
from user_defined_params import *

def connect(src, dst, src_dx, dst_dx):
# The function converts displacement fields from the source (src) mesh to the destination (dst) mesh.
# src_dx and dst_dx are spatial resolutions of the src and dst meshes, respectively. 
    disp_in = xr.open_dataset(str("disp.nc"))
    coor_in = xr.open_dataset(str(src) + ".mesh.coor.nc")

    coor = coor_in.coordinates
    disp = disp_in.displacements

    numnp = len(coor)
    nx = (xmax - xmin)/dx + 1
    nz = (zmax - zmin)/dx + 1
    ny = numnp/(nx*nz)
    print(numnp,nx,ny,nz)
    
    nx1 = (xmax - xmin)/dst_dx + 1
    nz1 = (zmax - zmin)/dst_dx + 1
    ny1 = (ymax - ymin)/dst_dx + 1
    grid_x0, grid_y0, grid_z0 = np.mgrid[xmin:dst_dx:xmax, ymin:dst_dx:0, zmin:dst_dx:zmax]
    grid_x1, grid_y1, grid_z1 = np.mgrid[xmin:dst_dx:xmax, 0:dst_dx:ymax, zmin:dst_dx:zmax]
    new_dispx = griddata(coor, disp[:0], (grid_x0, grid_y0, grid_z0), method='linear')
    new_dispy = griddata(coor, disp[:1], (grid_x0, grid_y0, grid_z0), method='linear')
    new_dispz = griddata(coor, disp[:2], (grid_x0, grid_y0, grid_z0), method='linear')

def _main_func(description):
    src = str("mesh")
    dst = str("sord")
    connect(src, dst)

if __name__ == "__main__":
    _main_func(__doc__)
