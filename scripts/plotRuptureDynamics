#!/usr/bin/env python3
"""
Script to plot on fault rupture dynamics.
"""
import numpy as np
from math    import *
from user_defined_params import par
from os.path import exists
import matplotlib.pyplot as plt
from matplotlib import animation, rc
import netCDF4 as nc
#
SMALL_SIZE = 12

def ruptureDynamics():
    nprocs = par.nx*par.ny*par.nz
    na     = int((par.fxmax-par.fxmin)/par.dx+1)
    ma     = int((par.fzmax-par.fzmin)/par.dx+1)
    rupt   = np.zeros((na*ma,3))
    rupt2d = np.zeros((ma,na,100))
    fVarArr= np.zeros((ma,na,100))
 
    [xx,zz] = np.meshgrid(par.fx,par.fz)
    xx = xx/1.e3
    zz = zz/1.e3

    print(na, ma)
    for me in range(nprocs):
      fname = 'frt.txt' + str(me)
      if exists(fname):
        print('Post-processing ' + fname ' ... ...')
        a = np.loadtxt(fname)
        n, m = a.shape
        #print(n,m)
        for i in range(n):
            ii = int((a[i,0] - par.fxmin)/par.dx)
            jj = int((a[i,2] - par.fzmin)/par.dx)
            # frt.txt* file structure:
            # Starting from 1, 1-3: coorx,y,z
            # 4, rupture time
            # 5-9,  final slips,d,n, 
            #       final sliprates,d.
            # 10,   peak slip rate.
            # 11,   final sliprate magnitude
            # 12-14, final tnrm, tstk, tdip
            # 15-20, vxm,vym,vzm,
            #        vxs,vys,vzs.
            # 21,   state variable
            # 22,   state var for normal stress variation (Shi and Day)
            
            rupt[jj*na+ii,0] = a[i,0]  # xcoor
            rupt[jj*na+ii,1] = -a[i,2] # zcoor, reverse sign to positive numbers.
            rupt[jj*na+ii,2] = a[i,3]  # rupture time

            rupt2d[jj,ii,0]  = a[i,3]  # rupture time
            rupt2d[jj,ii,1]  = (a[i,4]**2 + a[i,5]**2)**0.5  # slip magnitude
            rupt2d[jj,ii,2]  = a[i,9]                        # peak slip rate
            rupt2d[jj,ii,3]  = a[i,10]                       # final slip magnitude
            rupt2d[jj,ii,4]  = a[i,12]/1.e6 # final shear stress
            rupt2d[jj,ii,5]  = a[i,11]/1.e6 # final normal stress
            rupt2d[jj,ii,6]  = a[i,13]/1.e6 # final dip shear
            # 
            # fVarArr will be passed to the function generateNcRestart(faultVarArr):
            fVarArr[jj,ii,0]  = a[i,12] # shear_strike, Pa
            fVarArr[jj,ii,1]  = a[i,13] # shear_dip, Pa
            fVarArr[jj,ii,2]  = a[i,11] # effective_normal, Pa 
            fVarArr[jj,ii,3]  = a[i,10] # slip_rate, m/s
            fVarArr[jj,ii,4]  = a[i,20] # state_variable
            fVarArr[jj,ii,5]  = a[i,21] # state_normal
            fVarArr[jj,ii,6]  = a[i,14] # vxm, m/s
            fVarArr[jj,ii,7]  = a[i,15] # vym
            fVarArr[jj,ii,8]  = a[i,16] # vzm
            fVarArr[jj,ii,9]  = a[i,17] # vxs
            fVarArr[jj,ii,10] = a[i,18] # vys
            fVarArr[jj,ii,11] = a[i,19] # vzs

    levels = np.linspace(0,30,60) 
    #dt     = 30/60
    fig = plt.figure(figsize=(16,12), dpi= 300, facecolor='w', edgecolor='k')

    plt.rc('font', size=SMALL_SIZE)
    ax11 = fig.add_subplot(321)
    plt.contourf(xx,zz,rupt2d[:,:,1])
    plt.colorbar()
    plt.contour(xx,zz,rupt2d[:,:,0], levels)
    plt.title('Slip (m) & Rupture time (per 0.05 s)')

    ax12 = fig.add_subplot(322)
    plt.contourf(xx,zz,rupt2d[:,:,2])
    plt.colorbar()
    plt.title('Peak slip rate (m/s)')

    ax21 = fig.add_subplot(323)
    plt.contourf(xx,zz,rupt2d[:,:,3])
    plt.colorbar()
    plt.title('Final slip magnitude (m/s)')

    ax22 = fig.add_subplot(324)
    plt.contourf(xx,zz,rupt2d[:,:,4])
    plt.colorbar()
    plt.title('Shear stress (MPa)')
   
    ax22 = fig.add_subplot(325)
    plt.contourf(xx,zz,rupt2d[:,:,6])
    plt.colorbar()
    plt.title('Dip shear stress (MPa)')

    ax22 = fig.add_subplot(326)
    plt.contourf(xx,zz,rupt2d[:,:,5])
    plt.colorbar()
    plt.title('Normal stress (MPa)')

    #ax22 = fig.add_subplot(326)
    #plt.contourf(xx,zz,rupt2d[:,:,9])
    #plt.colorbar()
    #plt.title('Normal stress change (MPa)')

    plt.savefig("cRuptureDynamics.png", dpi = 300)
    plt.close()

    return fVarArr

def generateNcRestart(faultVarArr):
    # input fault_arr(nfx, nfz,) and make netCDF file fault.r.4eqquasi.nc for EQquasi. 
    # According to EQquasi subroutine netcdf_read_on_fault_restart(infile1, infile2),
    # or according to EQquasi subroutine netcdf_write_on_fault(outfile) in netcdf_io.f90,
    # The variables transferred include: 
    # infile1:  5, a, b, Dc, v0, r0
    # infile2/outfile: 12, shear_strike,, shear_dip, effective_normal, slip_rate, state_variable, state_normal, vxm, vym, vzm, vxs, vys, vzs
    # infile1 will be provided by EQquasi.
    # Therefore, we need to generate infile2 from frt.txt* from EQdyna. 
    # frt.txt* are processed by function ruptureDynamics() in this Python script.

    ds         = nc.Dataset("fault.dyna.r.nc", "w", format="NETCDF4")

    dip        = ds.createDimension('dip',    par.nfz)
    strike     = ds.createDimension('strike', par.nfx)
    dip_var    = ds.createVariable('dip', np.float64, ('dip',))
    strike_var = ds.createVariable('strike', np.float64, ('strike',))

    var0       = ds.createVariable('shear_strike',     np.float64, ('dip','strike',))
    var1       = ds.createVariable('shear_dip',        np.float64, ('dip','strike',))
    var2       = ds.createVariable('effective_normal', np.float64, ('dip','strike',))
    var3       = ds.createVariable('slip_rate',        np.float64, ('dip','strike',))
    var4       = ds.createVariable('state_variable',   np.float64, ('dip','strike',))
    var5       = ds.createVariable('state_normal',     np.float64, ('dip','strike',))
    var6       = ds.createVariable('vxm',              np.float64, ('dip','strike',))
    var7       = ds.createVariable('vym',              np.float64, ('dip','strike',))
    var8       = ds.createVariable('vzm',              np.float64, ('dip','strike',))
    var9       = ds.createVariable('vxs',              np.float64, ('dip','strike',))
    var10      = ds.createVariable('vys',              np.float64, ('dip','strike',))
    var11      = ds.createVariable('vzs',              np.float64, ('dip','strike',))
    var0.units = 'Pa'
    var1.units = 'Pa'
    var2.units = 'Pa'
    var3.units = 'm/s'
    var4.units = 'unit'
    var5.units = 'Pa'
    var6.units = 'm/s'
    var7.units = 'm/s'
    var8.units = 'm/s'
    var9.units = 'm/s'
    var10.units = 'm/s'
    var11.units = 'm/s'

    strike_var[:] = par.fx[:]
    dip_var[:]    = par.fz[:]
    var0[:,:]     = faultVarArr[:,:,0]
    var1[:,:]     = faultVarArr[:,:,1]
    var2[:,:]     = faultVarArr[:,:,2]
    var3[:,:]     = faultVarArr[:,:,3]
    var4[:,:]     = faultVarArr[:,:,4]
    var5[:,:]     = faultVarArr[:,:,5]
    var6[:,:]     = faultVarArr[:,:,6]
    var7[:,:]     = faultVarArr[:,:,7]
    var8[:,:]     = faultVarArr[:,:,8]
    var9[:,:]     = faultVarArr[:,:,9]
    var10[:,:]    = faultVarArr[:,:,10]
    var11[:,:]    = faultVarArr[:,:,11]

    ds.close()
  
def _main_func(description):
    fVarArr = ruptureDynamics()
    print('Generating rupture dynamics figure ...')
    generateNcRestart(fVarArr)
    print('Generating restart file fault.dyna.r.nc ...')

if __name__ == "__main__":
    _main_func(__doc__)
